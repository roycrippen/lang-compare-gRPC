// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lang_compare.proto

#ifndef PROTOBUF_INCLUDED_lang_5fcompare_2eproto
#define PROTOBUF_INCLUDED_lang_5fcompare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lang_5fcompare_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_lang_5fcompare_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_lang_5fcompare_2eproto();
namespace langcompare {
class XorCipherReply;
class XorCipherReplyDefaultTypeInternal;
extern XorCipherReplyDefaultTypeInternal _XorCipherReply_default_instance_;
class XorCipherRequest;
class XorCipherRequestDefaultTypeInternal;
extern XorCipherRequestDefaultTypeInternal _XorCipherRequest_default_instance_;
}  // namespace langcompare
namespace google {
namespace protobuf {
template<> ::langcompare::XorCipherReply* Arena::CreateMaybeMessage<::langcompare::XorCipherReply>(Arena*);
template<> ::langcompare::XorCipherRequest* Arena::CreateMaybeMessage<::langcompare::XorCipherRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace langcompare {

// ===================================================================

class XorCipherRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:langcompare.XorCipherRequest) */ {
 public:
  XorCipherRequest();
  virtual ~XorCipherRequest();

  XorCipherRequest(const XorCipherRequest& from);

  inline XorCipherRequest& operator=(const XorCipherRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XorCipherRequest(XorCipherRequest&& from) noexcept
    : XorCipherRequest() {
    *this = ::std::move(from);
  }

  inline XorCipherRequest& operator=(XorCipherRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XorCipherRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XorCipherRequest* internal_default_instance() {
    return reinterpret_cast<const XorCipherRequest*>(
               &_XorCipherRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(XorCipherRequest* other);
  friend void swap(XorCipherRequest& a, XorCipherRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XorCipherRequest* New() const final {
    return CreateMaybeMessage<XorCipherRequest>(nullptr);
  }

  XorCipherRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XorCipherRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XorCipherRequest& from);
  void MergeFrom(const XorCipherRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XorCipherRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string in_str = 1;
  void clear_in_str();
  static const int kInStrFieldNumber = 1;
  const ::std::string& in_str() const;
  void set_in_str(const ::std::string& value);
  #if LANG_CXX11
  void set_in_str(::std::string&& value);
  #endif
  void set_in_str(const char* value);
  void set_in_str(const char* value, size_t size);
  ::std::string* mutable_in_str();
  ::std::string* release_in_str();
  void set_allocated_in_str(::std::string* in_str);

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:langcompare.XorCipherRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr in_str_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lang_5fcompare_2eproto;
};
// -------------------------------------------------------------------

class XorCipherReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:langcompare.XorCipherReply) */ {
 public:
  XorCipherReply();
  virtual ~XorCipherReply();

  XorCipherReply(const XorCipherReply& from);

  inline XorCipherReply& operator=(const XorCipherReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XorCipherReply(XorCipherReply&& from) noexcept
    : XorCipherReply() {
    *this = ::std::move(from);
  }

  inline XorCipherReply& operator=(XorCipherReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XorCipherReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XorCipherReply* internal_default_instance() {
    return reinterpret_cast<const XorCipherReply*>(
               &_XorCipherReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(XorCipherReply* other);
  friend void swap(XorCipherReply& a, XorCipherReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XorCipherReply* New() const final {
    return CreateMaybeMessage<XorCipherReply>(nullptr);
  }

  XorCipherReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XorCipherReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XorCipherReply& from);
  void MergeFrom(const XorCipherReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XorCipherReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string out_str = 1;
  void clear_out_str();
  static const int kOutStrFieldNumber = 1;
  const ::std::string& out_str() const;
  void set_out_str(const ::std::string& value);
  #if LANG_CXX11
  void set_out_str(::std::string&& value);
  #endif
  void set_out_str(const char* value);
  void set_out_str(const char* value, size_t size);
  ::std::string* mutable_out_str();
  ::std::string* release_out_str();
  void set_allocated_out_str(::std::string* out_str);

  // @@protoc_insertion_point(class_scope:langcompare.XorCipherReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr out_str_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lang_5fcompare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XorCipherRequest

// string in_str = 1;
inline void XorCipherRequest::clear_in_str() {
  in_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XorCipherRequest::in_str() const {
  // @@protoc_insertion_point(field_get:langcompare.XorCipherRequest.in_str)
  return in_str_.GetNoArena();
}
inline void XorCipherRequest::set_in_str(const ::std::string& value) {
  
  in_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:langcompare.XorCipherRequest.in_str)
}
#if LANG_CXX11
inline void XorCipherRequest::set_in_str(::std::string&& value) {
  
  in_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:langcompare.XorCipherRequest.in_str)
}
#endif
inline void XorCipherRequest::set_in_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  in_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:langcompare.XorCipherRequest.in_str)
}
inline void XorCipherRequest::set_in_str(const char* value, size_t size) {
  
  in_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:langcompare.XorCipherRequest.in_str)
}
inline ::std::string* XorCipherRequest::mutable_in_str() {
  
  // @@protoc_insertion_point(field_mutable:langcompare.XorCipherRequest.in_str)
  return in_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XorCipherRequest::release_in_str() {
  // @@protoc_insertion_point(field_release:langcompare.XorCipherRequest.in_str)
  
  return in_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XorCipherRequest::set_allocated_in_str(::std::string* in_str) {
  if (in_str != nullptr) {
    
  } else {
    
  }
  in_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), in_str);
  // @@protoc_insertion_point(field_set_allocated:langcompare.XorCipherRequest.in_str)
}

// string key = 2;
inline void XorCipherRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XorCipherRequest::key() const {
  // @@protoc_insertion_point(field_get:langcompare.XorCipherRequest.key)
  return key_.GetNoArena();
}
inline void XorCipherRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:langcompare.XorCipherRequest.key)
}
#if LANG_CXX11
inline void XorCipherRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:langcompare.XorCipherRequest.key)
}
#endif
inline void XorCipherRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:langcompare.XorCipherRequest.key)
}
inline void XorCipherRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:langcompare.XorCipherRequest.key)
}
inline ::std::string* XorCipherRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:langcompare.XorCipherRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XorCipherRequest::release_key() {
  // @@protoc_insertion_point(field_release:langcompare.XorCipherRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XorCipherRequest::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:langcompare.XorCipherRequest.key)
}

// -------------------------------------------------------------------

// XorCipherReply

// string out_str = 1;
inline void XorCipherReply::clear_out_str() {
  out_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XorCipherReply::out_str() const {
  // @@protoc_insertion_point(field_get:langcompare.XorCipherReply.out_str)
  return out_str_.GetNoArena();
}
inline void XorCipherReply::set_out_str(const ::std::string& value) {
  
  out_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:langcompare.XorCipherReply.out_str)
}
#if LANG_CXX11
inline void XorCipherReply::set_out_str(::std::string&& value) {
  
  out_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:langcompare.XorCipherReply.out_str)
}
#endif
inline void XorCipherReply::set_out_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:langcompare.XorCipherReply.out_str)
}
inline void XorCipherReply::set_out_str(const char* value, size_t size) {
  
  out_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:langcompare.XorCipherReply.out_str)
}
inline ::std::string* XorCipherReply::mutable_out_str() {
  
  // @@protoc_insertion_point(field_mutable:langcompare.XorCipherReply.out_str)
  return out_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XorCipherReply::release_out_str() {
  // @@protoc_insertion_point(field_release:langcompare.XorCipherReply.out_str)
  
  return out_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XorCipherReply::set_allocated_out_str(::std::string* out_str) {
  if (out_str != nullptr) {
    
  } else {
    
  }
  out_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), out_str);
  // @@protoc_insertion_point(field_set_allocated:langcompare.XorCipherReply.out_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace langcompare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_lang_5fcompare_2eproto
